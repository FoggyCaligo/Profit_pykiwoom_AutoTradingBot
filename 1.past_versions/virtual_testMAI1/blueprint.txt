<file main.py>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//키움증권 api 연결.


if  장시작 전:
	//거래할 종목들 선별한 것 받아온 후에 각 종목에 대한 매니저 생성 & 리스트에 저장
종목코드리스트 = get_ls()
	매니저리스트 = [주식종목코드리스트.length()]
for 코드 in 종목코드리스트:
	매니저리스트.append(new 매니저(코드))
		
else if 장시작 후:
	for 매니저 in 매니저리스트:
		매니저.init()


	while(flag != 장마감10분전):
	for 매니저 in 매니저리스트:
			매니저.trade()





else if 장종료 10분전 : 
	//손절매. 남은 물량 털어내기.
	





















<file trade.py>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
class 거래클래스{
	매수가, 예상가, 매도가, 매수시간,매도시간, 걸린시간
}
<file Stock_Manager.py>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
class 매니저{	
종목코드, 차트데이터, 10호가
거래리스트[] = new 거래클래스()
고점,저점

매니저(code)://생성자
	종목코드 = code
init():
	10호가 = 10호가받아오기()
	차트데이터 = 차트데이터받아오기()
	거래.매수가 = 0
	거래.예상가 = 0
	차트데이터temp = 차트데이터.copy()
	차트데이터temp.sort()
	고점 = 차트데이터[:-1]
	저점 = 차트데이터[0]

매수가=0
예상가=0
code에 대해 키움api 실시간 구독()
trade():
매수
현재가 = 10호가[10호가.length()/2] 
예상가 = 예상가도출()
if ( 현재가  < (고점+저점)/2) (and  [가장 최근 흐름] != 우하향)  and   [예상가] > 현재가+현재가 대비 수수료 + 세금 + 현재가의 2%):	
buy
temp거래데이터 = new 거래클래스()
temp거래데이터.매수가 = 현재가
temp거래데이터.매수시간=현재시간
temp거래데이터.예상가=예상가

거래리스트.append(temp거래데이터)

매도 
if ( 현재가 >= 매수가+세금+수수료+매수가의 2%):
	sell  //이익실현
else if ( 현재가 < 매수가 - 세금 - 수수료 - 매수가의 2.5%):
		sell //손절매
예상가도출():
		return 예상가 // 그때 만든 그 함수 이용하기





















class 매니저{
	현재가, 매수가, 예상가, 
종목코드, 고점, 저점
차트

	매니저(code){
	종목코드 = code
	
현재가 = (받아오기)
	매수가 = 0
	예상가 = 0
	
차트 = 차트
	차트.sort()
	고점 = 차트[:-1]
	저점 = 차트[0]

	code에 대해 키움api 실시간 구독()
	
}

	trade( 현재가, 매수가, 예상가 ):{
매수
if ( 현재가 < (고점+저점)/2) (and  [가장 최근 흐름] != 우하향)  and   [예상가] > 현재가+현재가 대비 수수료 + 세금 + 현재가의 2%):	
buy

매도 
if ( 현재가 >= 매수가+세금+수수료+매수가의 2%):
	sell  //이익실현
else if ( 현재가 < 매수가 - 세금 - 수수료 - 매수가의 2.5%):
		sell //손절매
}

예상가도출(){
		return 예상가 // 그때 만든 그 함수 이용하기
	}



};



<file get_ls.py>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
dsf
